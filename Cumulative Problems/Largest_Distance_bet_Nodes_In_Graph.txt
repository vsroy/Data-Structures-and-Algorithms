//Program to find the largest distance between nodes in a graph using DFS traversal
#include<iostream>
#include<list>
#include<pair>
#include<queue>
using namespace std

class Graph
{
	int vertices;
	list<int>* adj;	//Array of lists
	
	public:
		void AddEdge(int u, int v)
		{
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
	
		Graph(int V)
		{
			this->vertices = V;
			adj = new list<int>[V];
		}
		
		//Returns length and end point of the vertex where the longest distance ends
		pair<int,int> BFS(int u)
		{
			vector<int> dist(this->vertices);
			
			for(int i=0;i<vertices;i++)
				dist[i] = -1;
			
			queue<int> dfsQ;
			dfsQ.push(u);
			
			while(!dfsQ.empty())
			{
				int curr_vertex = dfsQ.front();
				list<int>::iterator it;	//Getting the current vertex and doing a BFS of all adjoining vertices
				
				for(it = adj[curr_vertex].begin(); it != adj[curr_vertex].end();it++)
				{
					int v = *it;
					if(dist[v] != -1)
					{
						dfsQ.push(v);
						dist[v] = dist[curr_vertex] + 1
					}
				}
			}
			
			int max_dis = 0;
			int end_vertex = u; 
			for(int i=0;i<dist.size();i++)
			{
				if(dist[i] > max_dis)
				{
					max_dis = dist[i];
					end_vertex = u;
				}
			}
			retutn make_pair(end_vertex, max_dis);
		}
		
		//Returns longest distance from one vertex to another vertex in a graph
		void LongestPath()
		{
			pair<int, int> t1, t2;
			
			t1 = BFS(0);
			t2 = BFS(t1.first);
			
			cout << "Longest Distance from " << t1.first << " to " << t2.first << " of length " << t2.second;
		}
};