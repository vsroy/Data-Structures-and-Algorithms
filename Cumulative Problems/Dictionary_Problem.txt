#include<iostream>
#include<vector>
#include<string>
using namespace std;

int dictionaryContains(string word) 
{ 
    string dictionary[] = {"mobile","samsung","sam","sung","man","mango", 
                           "icecream","and","go","i","like","ice","cream"}; 
    int size = sizeof(dictionary)/sizeof(dictionary[0]); 
    for (int i = 0; i < size; i++) 
        if (dictionary[i].compare(word) == 0) 
           return true; 
    return false; 
} 

bool wordBreak(string str)
{
	int size = str.size();
	if(size == 0)
		return true;
		
	//Create the dp vect
	vector<int> dpVect(size+1, 0);
	
	for(int i=1;i<=size;i++)
	{
		if(dpVect[i] = false && dictionaryContains(str.substr(0,i)))
			dpVect[i] = true;
			
		// wb[i] is true, then check for all substrings starting from 
        // (i+1)th character and store their results. 
		if(dpVect[i] == true)
		{
			if(i == size)
				return true;	//We have reached the last perfix
				
			for(int j=i+1;j<=size;j++)
			{
				if(dpVect[j] == false && dictionaryContains(str.substr(i,j-i)))
					dpVect[j] = true;
					
				if(j == size && dpVect[j] == true)
					return true;
			}
		}
	}
	return false;
}

int main()
{
	wordBreak("ilikesamsung")? cout <<"Yes\n": cout << "No\n"; 
    wordBreak("iiiiiiii")? cout <<"Yes\n": cout << "No\n"; 
    wordBreak("")? cout <<"Yes\n": cout << "No\n"; 
    wordBreak("ilikelikeimangoiii")? cout <<"Yes\n": cout << "No\n"; 
    wordBreak("samsungandmango")? cout <<"Yes\n": cout << "No\n"; 
    wordBreak("samsungandmangok")? cout <<"Yes\n": cout << "No\n"; 
    return 0; 
	return 0;
}